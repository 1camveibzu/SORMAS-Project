package org.sormas.e2etests.steps.web.application.statistics;

import static org.sormas.e2etests.pages.application.events.EventDirectoryPage.EVENT_EXPORT_BUTTON;
import static org.sormas.e2etests.pages.application.statistics.StatisticsPage.*;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvException;
import cucumber.api.java8.En;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import org.sormas.e2etests.helpers.WebDriverHelpers;
import org.testng.asserts.SoftAssert;

@Slf4j
public class StatisticsSteps implements En {

  private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

  @Inject
  public StatisticsSteps(WebDriverHelpers webDriverHelpers, SoftAssert softly) {
    When(
        "I click on the Database Export tab from Statistics directory",
        () -> webDriverHelpers.clickOnWebElementBySelector(DATABASE_EXPORT_TAB));
    When(
        "I click on the Event Groups checkbox from Statistics directory",
        () -> webDriverHelpers.clickOnWebElementBySelector(EVENT_GROUPS_CHECKBOX));
    When(
        "I click on the Export button from Database Export tab",
        () -> {
          webDriverHelpers.clickOnWebElementBySelector(EVENT_EXPORT_BUTTON);
          TimeUnit.SECONDS.sleep(2);
        });
    When(
        "I unzip a downloaded file from Database export",
        () -> {
          String source = "./downloads/sormas_export_" + LocalDate.now().format(formatter) + ".zip";
          String destination = "./downloads";
          try {
            ZipFile zipFile = new ZipFile(source);
            zipFile.extractAll(destination);
            Path path = Paths.get(source);
            Files.delete(path);
          } catch (ZipException e) {
            e.printStackTrace();
          }
        });
    When(
        "I check if downloaded file generated by Event Groups database export contains required headers",
        () -> {
          String file = "./downloads/eventgroups.csv";
          Path path = Paths.get(file);
          String[] Columns = parseEventGroupsDatabaseExportColumns(file);
          Files.delete(path);
          softly.assertTrue(
              Arrays.asList(Columns).contains("id"), "Downloaded data does not contain id column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("uuid"),
              "Downloaded data does not contain uuid column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("name"),
              "Downloaded data does not contain name column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("changedate"),
              "Downloaded data does not contain changedate column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("creationdate"),
              "Downloaded data does not contain creationdate column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("archived"),
              "Downloaded data does not contain archived column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("sys_period"),
              "Downloaded data does not contain sys_period column!");
          softly.assertTrue(
              Arrays.asList(Columns).contains("change_user_id"),
              "Downloaded data does not contain change_user_id column!");
          softly.assertAll();
        });

    And(
        "I click on the Add filter button from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(ADD_FILTER_BUTTON);
          webDriverHelpers.clickOnWebElementBySelector(ADD_FILTER_BUTTON);
        });

    And(
        "I click the Remove Filter Button from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(REMOVE_FILTER_BUTTON);
          webDriverHelpers.clickOnWebElementBySelector(REMOVE_FILTER_BUTTON);
        });

    And(
        "I click the Reset Filter Button from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(RESET_FILTER_BUTTON);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(RESET_FILTER_BUTTON);
          webDriverHelpers.clickOnWebElementBySelector(RESET_FILTER_BUTTON);
        });

    And(
        "^I select Visualisation type ([^\"]*) from the Statistics Page",
        (String visualisationType) -> {
          switch (visualisationType) {
            case "Table":
              webDriverHelpers.waitUntilElementIsVisibleAndClickable(
                  VISUALISATION_TYPE_TABLE_RADIO_BUTTON);
              webDriverHelpers.clickOnWebElementBySelector(VISUALISATION_TYPE_TABLE_RADIO_BUTTON);
              break;
            case "Map":
              webDriverHelpers.waitUntilElementIsVisibleAndClickable(
                  VISUALISATION_TYPE_MAP_RADIO_BUTTON);
              webDriverHelpers.clickOnWebElementBySelector(VISUALISATION_TYPE_MAP_RADIO_BUTTON);
              break;
            case "Chart":
              webDriverHelpers.waitUntilElementIsVisibleAndClickable(
                  VISUALISATION_TYPE_CHART_RADIO_BUTTON);
              webDriverHelpers.clickOnWebElementBySelector(VISUALISATION_TYPE_CHART_RADIO_BUTTON);
              break;
          }
        });
    And(
        "^I select Options Data Displayed ([^\"]*) from the Statistics Page",
        (String dataDisplayed) -> {
          switch (dataDisplayed) {
            case "Case Count":
              webDriverHelpers.waitUntilElementIsVisibleAndClickable(
                  DATA_DISPLAYED_CASE_COUNT_RADIO_BUTTON);
              webDriverHelpers.clickOnWebElementBySelector(DATA_DISPLAYED_CASE_COUNT_RADIO_BUTTON);
              break;
            case "Case Incidence":
              webDriverHelpers.waitUntilElementIsVisibleAndClickable(
                  DATA_DISPLAYED_CASE_INCIDENCE_RADIO_BUTTON);
              webDriverHelpers.clickOnWebElementBySelector(
                  DATA_DISPLAYED_CASE_INCIDENCE_RADIO_BUTTON);
              break;
          }
        });

    Then(
        "I Verify the presence of Rows, Columns, and switch-between Button in the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(TABLE_ROWS_DROPDOWN);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(SWITCH_ROWS_AND_COLUMNS_BUTTON);
        });

    Then(
        "I Verify the presence of Map Type Regions and Districts buttons in the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(MAP_TYPE_REGIONS_RADIO_BUTTON);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(MAP_TYPE_DISTRICTS_RADIO_BUTTON);
        });

    Then(
        "I Verify the presence of Chart Type buttons from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(CHART_TYPE_COLUMN_RADIO_BUTTON);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(
              CHART_TYPE_STACKED_COLUMN_RADIO_BUTTON);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(CHART_TYPE_LINE_RADIO_BUTTON);
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(CHART_TYPE_PIE_RADIO_BUTTON);
        });

    Then(
        "I Verify the presence of Show Zero Values checkbox from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(SHOW_ZERO_VALUES_CHECKBOX);
        });

    Then(
        "I Verify the presence of Incidence Divisor Input from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(INCIDENCE_DIVISOR_INPUT);
        });

    Then(
        "I Verify the presence of the Generate Button from the Statistics Page",
        () -> {
          webDriverHelpers.waitUntilElementIsVisibleAndClickable(GENERATE_BUTTON);
        });
  }

  public String[] parseEventGroupsDatabaseExportColumns(String fileName) {
    String[] r = null;
    CSVParser csvParser = new CSVParserBuilder().withSeparator(',').build();
    try (CSVReader reader =
        new CSVReaderBuilder(new FileReader(fileName))
            .withCSVParser(csvParser)
            .withSkipLines(1)
            .build()) {
      r = reader.readNext();
    } catch (IOException e) {
      log.error("IOException parseEventGroupsDatabaseExportColumns: {}", e.getCause());
    } catch (CsvException e) {
      log.error("CsvException parseEventGroupsDatabaseExportColumns: {}", e.getCause());
    }
    return r;
  }
}
